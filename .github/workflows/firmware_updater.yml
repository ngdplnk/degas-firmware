name: 'Degas Firmware Dumper'

on:
  push:
    paths:
      - 'firmware_updates/**.txt'
  
  workflow_dispatch:

jobs:
  process_firmware_files:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        region: [global, eea, ru, id, tw, tr, global_dc]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read Firmware Info for ${{ matrix.region }}
        id: firmware_info
        run: |
          FILE_PATH="firmware_updates/${{ matrix.region }}.txt"
          if [ ! -f "$FILE_PATH" ]; then
            echo "File for region ${{ matrix.region }} not found. Skipping."
            exit 0
          fi
          VERSION=$(sed -n '1p' "$FILE_PATH" | tr -d '[:space:]')
          DOWNLOAD_URL=$(sed -n '2p' "$FILE_PATH" | tr -d '[:space:]')
          FILENAME=$(basename "${DOWNLOAD_URL}")
          if [ -z "$VERSION" ] || [ -z "$DOWNLOAD_URL" ]; then
            echo "ERROR: Version or URL is missing in ${FILE_PATH}."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "FILENAME=${FILENAME}" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_URL=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
          echo "DATA_FOUND=true" >> $GITHUB_OUTPUT

      - name: Check if Release Already Exists
        if: steps.firmware_info.outputs.DATA_FOUND == 'true'
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ steps.firmware_info.outputs.VERSION }}-${{ matrix.region }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release ${TAG} already exists. Stopping."
            echo "IS_NEW=false" >> $GITHUB_OUTPUT
          else
            echo "Release ${TAG} is new. Proceeding."
            echo "IS_NEW=true" >> $GITHUB_OUTPUT
          fi

      - name: Download and Extract Firmware
        if: steps.check_release.outputs.IS_NEW == 'true'
        run: |
          echo "Downloading ${{ steps.firmware_info.outputs.FILENAME }}..."
          wget -q --show-progress -O "${{ steps.firmware_info.outputs.FILENAME }}" "${{ steps.firmware_info.outputs.DOWNLOAD_URL }}"
          echo "Extracting files..."
          mkdir -p extracted_firmware
          tar -xvf "${{ steps.firmware_info.outputs.FILENAME }}" -C extracted_firmware

      - name: Create GitHub Release and Upload Files
        if: steps.check_release.outputs.IS_NEW == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          VERSION="${{ steps.firmware_info.outputs.VERSION }}"
          REGION_UPPER=$(echo "${{ matrix.region }}" | tr 'a-z' 'A-Z')
          TAG="v${VERSION}-${{ matrix.region }}"
          
          # Gather release information
          TOTAL_SIZE=$(du -sh extracted_firmware | awk '{print $1}')
          FILE_COUNT=$(find extracted_firmware -type f | wc -l)
          DUMP_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          # Create release notes body
          RELEASE_NOTES=$(cat <<EOF
          - **Total Size:** ${TOTAL_SIZE}
          - **File Count:** ${FILE_COUNT}
          - **Dump Date:** ${DUMP_DATE}

          Original Download URL: ${{ steps.firmware_info.outputs.DOWNLOAD_URL }}
          EOF
          )

          echo "Creating release with tag: ${TAG}"
          gh release create "$TAG" \
            --title "${VERSION} [${REGION_UPPER}]" \
            --notes "$RELEASE_NOTES" \
            extracted_firmware/*

